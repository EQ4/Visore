#include <vinoisecreator.h>
#include <viaudioobject.h>

#define WINDOW_SIZE 8192
#define NOISE_OFFSET 1024
#define MIN_NOISE_LENGTH 1
#define MAX_NOISE_LENGTH 64

ViNoiseCreator::ViNoiseCreator()
{
	// Must be at least the size of MAX_NOISE_LENGTH
	// Is between 0 and 0.01
	qreal random[] = {
		0.00357598, 0.00704359, 0.000357708, 0.00647519, 0.00116218, 0.00215531, 0.0097487, 0.00995095, 0.00756761, 0.00192374, 0.00458966, 0.00661126, 0.0018657, 0.00300125, 0.000809509, 0.000229189,
		0.00497415, 0.0029118, 0.00547743, 0.00386046, 0.00430224, 0.00105707, 0.00146512, 0.00691815, 0.00889521, 0.00023952, 0.00715308, 0.00912654, 0.00917251, 0.00874297, 0.00650045, 0.00274849,
		0.00578656, 0.00685816, 0.00922368, 0.00694875, 0.00901347, 0.00897239, 0.0068997, 0.00658108, 0.000896133, 0.00148936, 0.00319234, 0.00276183, 0.00449061, 0.00400185, 0.00299102, 0.00946476,
		0.00691365, 0.00846846, 0.00332522, 0.00121589, 0.00952553, 0.00479034, 0.00813404, 0.00842074, 0.00502986, 0.00528712, 0.00754728, 0.00420237, 0.00403009, 0.00404773, 0.00695086, 0.00981665,
		0.000905884, 0.00617455, 0.0067654, 0.00991935, 0.00514694, 0.0036651, 0.00650043, 0.00604307, 0.00515445, 0.00969277, 0.0088049, 0.00964507, 0.00369462, 0.00179593, 0.00910983, 0.000608272,
		0.000264383, 0.00243505, 0.00182416, 0.00978991, 0.00722539, 0.0099582, 0.00821065, 0.00225524, 0.00524532, 0.00575792, 0.00645762, 0.00927541, 0.00980565, 0.00340848, 0.00909206, 0.000711535,
		0.00958303, 0.00585746, 0.00063089, 0.00472996, 0.00952256, 0.00713132, 0.000773031, 0.00467701, 0.00682409, 0.00957793, 0.00432208, 0.000518717, 0.00137386, 0.00343191, 0.00112699, 0.00163824,
		0.00586695, 0.00295115, 0.00142816, 0.00309234, 0.00290935, 0.0096388, 0.00534759, 0.00815466, 0.00539673, 0.0018052, 0.00743007, 0.00520238, 0.00521368, 0.00652213, 0.00591391, 0.00479671,
		0.00237959, 0.0065448, 0.00952668, 0.00190215, 0.00367613, 0.000299707, 0.00657916, 0.00050022, 0.00987764, 0.000901236, 0.00101894, 0.0012515, 0.00433314, 0.00214593, 0.00288974, 0.000200096,
		0.00509707, 0.0043179, 0.00329244, 0.00800642, 0.0039567, 0.00864002, 0.00616109, 0.00935343, 0.000445225, 0.00359116, 0.00455581, 0.00565891, 0.000113294, 0.000469724, 0.000455622, 0.00249289,
		0.00701453, 0.0099823, 0.00439504, 0.000690653, 0.000282004, 0.000974196, 0.00119087, 0.000159644, 0.00187543, 0.00220981, 0.00141114, 0.00620857, 0.00435574, 0.00430089, 0.00640867, 0.00945281,
		0.00861879, 0.00970111, 0.00745923, 0.00257549, 0.00834113, 0.00362032, 0.00192892, 0.00878635, 0.00721148, 0.00648473, 0.00444526, 0.00732477, 0.00695446, 0.00490088, 0.00981766, 0.00396898,
		0.00488318, 0.0042127, 0.00465964, 0.00516518, 0.00518689, 0.00585051, 0.00532483, 0.00706233, 0.00806032, 0.00673597, 0.0032709, 0.00241606, 0.00103686, 0.00967957, 0.00186887, 0.00965565,
		0.00938067, 0.0093281, 0.00223114, 0.0077218, 0.00294842, 0.00416006, 0.00650815, 0.000159901, 0.000644796, 0.000953415, 0.00748467, 0.00759925, 0.0058543, 0.00730234, 0.00156823, 0.00073748,
		0.00151503, 0.00622787, 0.00590266, 0.00670193, 0.00207838, 0.00122749, 0.00376426, 0.000138701, 0.00796347, 0.00703515, 0.00255476, 0.00900033, 0.00671472, 0.00442363, 0.00865598, 0.0060954,
		0.00375173, 0.000887126, 0.0038172, 0.00670015, 0.00504719, 0.000325349, 0.00686005, 0.00569199, 0.00127876, 0.00434472, 0.00329124, 0.00713306, 0.00164706, 0.00485947, 0.00787054, 0.00316209,
		0.00108734, 0.00377321, 0.00986402, 0.00316573, 0.0050007, 0.00362828, 0.00330443, 0.00296417, 0.000663432, 0.00585918, 0.0019645, 0.00737815, 0.000282809, 0.000620482, 0.00347355, 0.00403453,
		0.00150761, 0.00729075, 0.000734682, 0.0065548, 0.0076161, 0.00759473, 0.00224679, 0.00889486, 0.00193945, 0.00553802, 0.00602792, 0.00358651, 0.000397498, 0.00389847, 0.0067486, 0.00148484,
		0.00767167, 0.00661263, 0.00465057, 0.00267238, 0.000240904, 0.00795499, 0.00563654, 0.000904335, 0.00381418, 0.00760104, 0.00828249, 0.00409699, 0.00822153, 0.00175604, 0.00813152, 0.00972913,
		0.00904679, 0.0088662, 0.00628393, 0.00666288, 0.00646093, 0.00853072, 0.00555774, 0.00840039, 0.00406874, 0.00158567, 0.0019869, 0.00446624, 0.00548414, 0.0087355, 0.00595108, 0.00315581,
		0.00534813, 0.000601651, 0.00582819, 0.00558903, 0.00855664, 0.00146473, 0.00649337, 0.00237082, 0.00906577, 0.00477586, 0.00646781, 0.0072873, 0.0065319, 0.00459933, 0.00701643, 0.00557869,
		0.00346553, 0.00330036, 0.00224157, 0.00992647, 0.00183108, 0.00779931, 0.00832685, 0.00589982, 0.00938498, 0.00031375, 0.000366062, 0.00486912, 0.00904925, 0.00631714, 0.00802493, 0.00439738,
		0.0069188, 0.00385311, 0.00998642, 0.00547544, 0.00531784, 0.00647978, 0.00784626, 0.00438362, 0.00125564, 0.00431407, 0.00167091, 0.00778754, 0.0089134, 0.00868734, 0.00336623, 0.00237893,
		0.0019877, 0.0056078, 0.0023054, 0.00381878, 0.00340711, 0.000632248, 0.0097186, 0.0027921, 0.000945998, 8.46667e-05, 0.00766122, 0.00999525, 0.00640181, 0.00568615, 0.00439263, 0.00332061,
		0.00953926, 0.00437905, 0.00879605, 0.0048571, 0.000858833, 0.00664231, 0.00924072, 0.00211448, 0.00095638, 0.000911632, 0.00990202, 0.00986978, 0.00959897, 0.00326825, 0.00224871, 0.00158668,
		0.00887604, 0.00455411, 0.00540546, 0.00228316, 0.00518636, 0.00512407, 0.00507525, 0.00613235, 0.00520873, 0.00273647, 0.00612761, 0.00161055, 0.00842262, 0.000520239, 0.00493115, 0.00796188,
		0.00489929, 0.0037272, 0.00281898, 0.00575812, 0.000369509, 0.0020597, 0.0078726, 0.00132589, 0.00297133, 0.00777462, 0.00119567, 0.00257031, 0.00104286, 0.00344438, 0.00415699, 0.0099189,
		0.00799849, 0.00956245, 0.00220206, 0.00318484, 0.00468652, 0.00727732, 0.0093172, 0.00989525, 1.37849e-05, 0.0054448, 0.0015058, 0.0084364, 0.00596504, 0.00643695, 0.00639828, 0.000864328,
		0.000164148, 0.00921726, 0.00662245, 0.000533656, 0.00127696, 0.00449505, 0.00185955, 0.00424829, 0.00226966, 0.00305521, 0.0068186, 0.00331252, 0.00649959, 0.000975587, 0.00323143, 0.00449808,
		0.000538037, 0.00543349, 0.00768292, 0.00522455, 0.0027108, 0.00700012, 0.0051198, 0.00272459, 0.00244492, 0.0066256, 0.00116099, 0.00840996, 0.00306255, 0.00755927, 0.00927429, 0.0032267,
		0.00677653, 0.00589674, 0.00376035, 0.00805349, 0.000391783, 0.0056199, 0.00230178, 0.00266145, 0.00867511, 0.00912038, 0.00597397, 0.0051747, 9.59654e-05, 0.0092054, 0.00967278, 0.000634002,
		0.00463889, 0.0073557, 0.00585856, 0.00734969, 0.00435582, 0.000978359, 7.42814e-05, 0.00680074, 0.00760396, 0.00123527, 0.00521069, 0.000666507, 0.00879454, 0.00448498, 0.0038932, 0.00557107,
		0.000381716, 0.00765355, 0.00362455, 0.000773499, 0.00327345, 0.00592633, 0.00343494, 0.00194856, 0.00504671, 0.00940891, 0.00712327, 0.00514267, 0.00861431, 0.00679605, 0.00577667, 0.0032532,
		0.00415175, 0.00163523, 0.000602889, 0.00850757, 0.00261359, 0.00067717, 0.00530831, 0.000217548, 0.00191244, 0.000519, 0.000884055, 0.000706982, 0.00500398, 0.00477726, 0.00627805, 0.0053857,
		0.00243081, 0.0099026, 0.0061592, 0.00570427, 0.00582893, 0.00959414, 0.00765283, 0.000875631, 0.00900305, 0.00477609, 0.0060183, 0.00761737, 0.00157214, 0.00179498, 0.000870563, 0.00572389,
		0.0034302, 0.00147345, 0.00423146, 0.00604379, 0.00215062, 0.00953977, 0.00626134, 0.00406306, 5.87663e-05, 0.0071454, 0.00477005, 0.00506275, 0.00192265, 0.00104809, 0.000448444, 0.00435347,
		0.000950691, 0.00660764, 5.77309e-05, 0.00677962, 0.00620178, 0.00771056, 0.00765525, 0.00520484, 0.00248665, 0.00367355, 0.0028222, 0.0040588, 0.00546853, 0.00369276, 0.00978269, 0.00889873,
		0.00516622, 0.00401415, 0.00494252, 0.00731684, 0.00355392, 0.00120386, 0.0013799, 0.00361268, 0.00834926, 0.00614995, 0.00867543, 0.000271911, 0.00719804, 0.00912387, 0.00462538, 0.00814873,
		0.00573151, 0.00468311, 0.00492835, 0.0019333, 0.00239367, 0.0025836, 0.00713813, 0.00488032, 0.00625715, 0.00996033, 0.00893912, 0.00172567, 0.0036531, 0.0087218, 0.000624403, 0.00881932,
		0.00273595, 0.00556693, 0.00613615, 0.00628987, 0.00677079, 0.00751606, 0.00990255, 0.00512005, 0.00366601, 0.00857798, 0.00539196, 0.000864051, 0.00770185, 1.73343e-05, 0.00901279, 0.00343336,
		0.00470044, 0.00394114, 0.00536666, 0.00709411, 0.00652473, 0.00250479, 0.00197443, 0.00278188, 0.00246513, 0.000913546, 0.00450756, 0.00611822, 0.00963535, 0.00513196, 0.00493754, 0.0023713,
		0.000698885, 0.00107369, 0.00866117, 0.00746967, 0.00858975, 0.00856372, 0.00258972, 0.00225576, 0.0071417, 0.00798168, 0.00311981, 0.00484355, 0.00799901, 0.0021326, 0.00827692, 0.00269945,
		0.00607373, 0.00364358, 0.00979356, 0.00259847, 0.00614837, 0.00176799, 0.00538035, 0.00861349, 0.00268154, 0.0098879, 0.00473172, 0.00231689, 0.00501986, 0.00966926, 0.00468819, 0.00571875,
		0.000742951, 0.00334936, 0.00318842, 0.0093327, 0.00191309, 0.00577814, 0.00158846, 0.00905479, 0.00375982, 0.00470827, 0.00389834, 0.00175883, 0.00684087, 0.00217526, 0.00445828, 0.0029146,
		0.00581883, 0.00425185, 0.00551306, 0.0019672, 0.00601984, 0.000893412, 0.000580698, 0.00870138, 0.000781316, 0.00531242, 0.00101826, 0.00580118, 0.00498167, 0.00570645, 0.00151993, 0.00572462,
		0.00905582, 0.00470835, 0.00505733, 0.000968904, 0.00048649, 0.00664579, 2.36914e-05, 0.00424631, 0.00135406, 0.00392203, 0.00600514, 0.00819492, 0.00609729, 0.000463421, 0.00110952, 0.00191612,
		0.00471527, 0.00662258, 0.00388333, 0.000735103, 0.007516, 0.00446403, 0.00943648, 0.00829731, 0.00977644, 0.000454742, 0.00409849, 0.00475811, 0.0061612, 0.00561842, 0.000482738, 0.00521702,
		0.000326767, 0.00554006, 0.00618592, 0.000813257, 0.00218585, 0.00620961, 0.00505957, 0.00353991, 0.000131642, 0.0010647, 0.00173483, 0.00622893, 0.00152812, 0.00284435, 0.00814505, 0.00624339,
		0.00946693, 0.00202838, 0.00697849, 0.00698293, 0.00649241, 0.00641497, 0.00528024, 0.00626885, 0.00686971, 0.00937873, 0.00102696, 0.00303091, 0.00499715, 0.0015097, 0.00824793, 0.00532392,
		0.00704976, 0.00443384, 0.00613717, 0.00923561, 0.000643456, 0.00119674, 0.00277552, 0.000775097, 0.00226144, 0.00451035, 0.00700403, 0.00378957, 0.0073547, 0.00514908, 3.29569e-05, 0.00682164,
		0.00717746, 0.00701145, 0.00380457, 0.00366987, 0.00342642, 0.00908481, 0.00993872, 0.000296136, 0.00846354, 0.00096568, 0.00332705, 0.00346069, 0.00247538, 0.00157497, 0.00878461, 0.00952514,
		0.00600882, 0.00492178, 0.00876076, 0.00665227, 0.00611852, 0.00153628, 0.00742737, 0.00837997, 0.00604663, 0.0044314, 0.00216953, 0.00340133, 0.00958048, 0.00220249, 0.000222974, 0.00675794,
		0.00921394, 0.00402754, 0.000427815, 0.00264036, 0.00311235, 0.000366533, 0.0029365, 0.00157589, 0.00133221, 0.00626354, 0.00503659, 0.00380759, 0.00783852, 0.00382119, 0.00333274, 0.00384733,
		0.00874298, 0.00209349, 0.000499606, 0.0048615, 0.00362977, 0.00792698, 0.00324147, 0.0096764, 0.00235837, 0.005411, 0.00307774, 0.00193886, 0.00761349, 0.00330071, 0.0086968, 0.00682743,
		0.00732825, 0.00912461, 0.0094678, 0.000440604, 0.00949115, 0.00240429, 0.0020165, 0.000823361, 0.00866784, 0.00705308, 0.00463095, 0.00650636, 0.000874278, 0.00796369, 0.00035369, 0.00961726,
		5.71804e-05, 0.000853296, 0.00447876, 0.00368695, 0.00878027, 0.00772022, 0.00336335, 0.00113865, 0.00313122, 0.00644109, 0.0030775, 0.000744716, 0.0097418, 0.0017743, 0.00757215, 0.00707005,
		0.000898917, 0.00703994, 0.00751065, 0.000390065, 0.00944424, 0.00952715, 0.00121343, 0.00811208, 0.00658023, 0.00584438, 0.00461843, 0.00745451, 0.00380807, 0.00497212, 0.00707177, 0.00386525,
		0.00582542, 0.00155052, 0.0075522, 0.00460569, 0.00927075, 0.00091555, 0.00574434, 0.00240197, 0.00735664, 0.00882184, 0.00314669, 0.00709843, 0.000596143, 0.000718834, 0.00416848, 0.00149506,
		0.00775878, 0.00167913, 0.00188512, 0.00720302, 0.00120628, 0.00309855, 0.00531509, 0.00778652, 0.00894293, 0.00993353, 0.00524103, 0.002751, 0.00490565, 0.0023128, 0.00661625, 0.000731066,
		0.00386332, 0.00416845, 0.00533676, 0.00313407, 0.005084, 0.0010811, 0.00553603, 0.00244063, 0.00990294, 0.00868272, 0.00953907, 0.00049908, 0.00940155, 0.00370755, 0.00199414, 0.00716033,
		0.00538668, 0.00387926, 0.00436335, 0.00659296, 0.00697782, 0.00967844, 0.00437948, 0.00592075, 0.00961196, 0.00962051, 0.00867174, 0.00451761, 0.00193331, 0.00528799, 0.00524868, 0.00579663,
		0.00945644, 0.000585435, 0.00893069, 0.00454043, 0.00166653, 0.00446673, 0.00698107, 0.00156947, 0.00314945, 0.00652013, 0.00206855, 0.002551, 0.000227679, 0.00406269, 0.00971133, 0.00561436,
		0.00794195, 0.00407468, 0.00220732, 0.00491977, 0.00375312, 0.0065868, 0.000840515, 0.00336508, 0.00620731, 0.00951226, 0.00788269, 0.00814061, 0.00480025, 0.00313137, 0.00393724, 0.00425669,
		0.00371681, 0.00286793, 0.00879712, 0.00538334, 0.00733466, 0.00577819, 0.00695281, 0.000484104, 0.00229832, 0.00902135, 0.0030351, 0.002526, 0.00308404, 0.00274643, 0.00814036, 0.00102599
	};

	mRandom = new qreal[MAX_NOISE_LENGTH];
	for(int i = 0; i < MAX_NOISE_LENGTH; ++i) mRandom[i] = random[i];
}

ViNoiseCreator::~ViNoiseCreator()
{
	delete [] mRandom;
}

void ViNoiseCreator::createNoise(ViBuffer *input, ViBuffer *output, ViBuffer *mask)
{
	ViSampleChunk mask1(WINDOW_SIZE);
	ViSampleChunk mask2(WINDOW_SIZE);

	ViAudioReadData inputData(input);
	inputData.setSampleCount(WINDOW_SIZE * 2); // Times 2 so that every channel has a size of WINDOW_SIZE
	ViAudioWriteData outputData;
	/*outputData.setSampleCount(WINDOW_SIZE * 2);
	ViAudioWriteData maskData(mask);
	maskData.setSampleCount(WINDOW_SIZE * 2);

	mNoiseLength = MIN_NOISE_LENGTH;
	mNoiseType = Hill;
	mNoiseDirection = 1;

	while(inputData.hasData())
	{
		inputData.read();
		ViSampleChunk &data1 = inputData.splitSamples(0);
		ViSampleChunk &data2 = inputData.splitSamples(1);

		addNoise(data1, data2, mask1, mask2);

		outputData.enqueueSplitSamples(data1, 0);
		outputData.enqueueSplitSamples(data2, 1);
		maskData.enqueueSplitSamples(mask1, 0);
		maskData.enqueueSplitSamples(mask2, 1);
	}*/
}

void ViNoiseCreator::addNoise(ViSampleChunk &samples1, ViSampleChunk &samples2, ViSampleChunk &mask1, ViSampleChunk &mask2)
{
	int i, currentOffset, halfWidth;
	for(i = 0; i < WINDOW_SIZE; ++i)
	{
		mask1[i] = 0;
		mask2[i] = 0;
	}

	currentOffset = 0;
	while(currentOffset + MAX_NOISE_LENGTH + NOISE_OFFSET <= samples1.size())
	{
		for(i = 0; i < mNoiseLength; ++i)
		{
			if(mNoise[i] > 1) samples1[i + currentOffset] = 1;
			else if(mNoise[i] < -1) samples1[i + currentOffset] = -1;
			else samples1[i + currentOffset] = mNoise[i];

			mask1[i + currentOffset] = 1;
		}
		currentOffset += MAX_NOISE_LENGTH + NOISE_OFFSET;
		nextNoiseKind();
	}

	halfWidth = NOISE_OFFSET / 2;
	currentOffset = halfWidth;
	while(currentOffset + MAX_NOISE_LENGTH + halfWidth <= samples1.size())
	{
		for(i = 0; i < mNoiseLength; ++i)
		{
			if(mNoise[i] > 1) samples2[i + currentOffset] = 1;
			else if(mNoise[i] < -1) samples2[i + currentOffset] = -1;
			else samples2[i + currentOffset] = mNoise[i];

			mask2[i + currentOffset] = 1;
		}
		currentOffset += MAX_NOISE_LENGTH + NOISE_OFFSET;
		nextNoiseKind();
	}
}

void ViNoiseCreator::createNoiseKind()
{
	mNoise.resize(mNoiseLength);

	createNoise1();

	/*if(mNoiseType == 0) createNoise1();
	else if(mNoiseType == 1) createNoise2();
	else if(mNoiseType == 2) createNoise3();
	else if(mNoiseType == 3) createNoise4();*/
}

void ViNoiseCreator::nextNoiseKind()
{
	++mNoiseLength;
	if(mNoiseLength > MAX_NOISE_LENGTH) mNoiseLength = MIN_NOISE_LENGTH;

	mNoiseType = (Type) (int(mNoiseType) + 1);
	if(mNoiseType > ZigZag) mNoiseType = Hill;

	mNoiseDirection *= -1;
}

void ViNoiseCreator::createNoise1()
{
	for(int i = 0; i < mNoiseLength; ++i)
	{
		mNoise[i] = mNoiseDirection * (1 - mRandom[i]);
	}
}

void ViNoiseCreator::createNoise2()
{
	int i, halfLength = mNoiseLength / 2;
	for(i = 0; i < halfLength; ++i)
	{
		mNoise[i] = mNoiseDirection * (1 - mRandom[i]);;
	}
	for(i = halfLength; i < mNoiseLength; ++i)
	{
		mNoise[i] = -1 * mNoiseDirection * (1 - mRandom[i]);;
	}
}

void ViNoiseCreator::createNoise3()
{
	int i, index = 0, end;
	int parts = qFloor(mNoiseLength / 4.0);

	qreal add = 1.0 / parts;

	qreal current = 0;

	// First spike
	for(i = 0; i < parts; ++i)
	{
		qreal value = current + (mNoiseDirection * mRandom[index]);
		mNoise[index] = value;
		++index;
		current += mNoiseDirection * add;
	}

	// Big double-spike
	end = 3 * parts;
	for(i = parts; i < end; ++i)
	{
		qreal value = current + (-1 * mNoiseDirection * mRandom[index]);
		mNoise[index] = value;
		++index;
		current += -1 * mNoiseDirection * add;
	}

	// Last spike
	for(i = end; i < mNoiseLength; ++i)
	{
		qreal value = current + (mNoiseDirection * mRandom[index]);
		mNoise[index] = value;
		++index;
		current += mNoiseDirection * add;
	}
}

void ViNoiseCreator::createNoise4()
{
	int current = 1;
	for(int i = 0; i < mNoiseLength; ++i)
	{
		mNoise[i] = current * mNoiseDirection * (1 - mRandom[i]);
		current *= -1;
	}
}
