#include <vinoisecreator.h>
#include <viaudioobject.h>

#define WINDOW_SIZE 16384
#define NOISE_OFFSET 2048
#define MIN_NOISE_LENGTH 1
#define MAX_NOISE_LENGTH 50

ViNoiseCreator::ViNoiseCreator()
{
	// Must be at least the size of MAX_NOISE_LENGTH
	// Is between 0 and 0.01
	qreal random[] = {
		0.0158915, 0.0474394, 0.00517185, 0.0137588, 0.00849587, 0.037904, 0.0456967, 0.0453402, 0.0314054, 0.0320008, 0.011626, 0.0349292, 0.00891756, 0.0484619, 0.0426197, 0.0111483,
		0.0152849, 0.04986, 0.0114252, 0.0153839, 0.0478976, 0.014834, 0.0286418, 0.0495012, 0.0273894, 0.0394145, 0.0420408, 0.0328145, 0.021019, 0.0127868, 0.000532024, 0.0369105,
		0.0102261, 0.00570388, 0.000669336, 0.018722, 0.0436079, 0.0463661, 0.0140623, 0.0250133, 0.0283668, 0.0256882, 0.00994248, 0.0372844, 0.0241501, 0.00256221, 0.0484326, 0.039435,
		0.00242217, 0.00985786, 0.00481883, 0.000319803, 0.0246919, 0.0334607, 0.049821, 0.00208122, 0.0228751, 0.0418618, 0.0348957, 0.0438941, 0.00464857, 0.0354277, 0.0308046, 0.0148747,
		0.0411316, 0.0314739, 0.0335967, 0.0347395, 0.02784, 0.047659, 0.00975282, 0.00620678, 0.0233472, 0.0196953, 0.0434912, 0.0474973, 0.0222575, 0.0419238, 0.0369323, 0.0246797,
		0.00178164, 0.0417511, 0.0249995, 0.0264735, 0.0252118, 0.0248205, 0.0285547, 0.0480869, 0.0166823, 0.0134504, 0.041981, 0.0213309, 0.0488782, 0.0227856, 0.0362056, 0.0400098,
		0.00425952, 0.0198024, 0.0247493, 0.0320995, 0.0174613, 0.0345021, 0.0383063, 0.0408086, 0.00419743, 0.0317974, 0.0383059, 0.0264549, 0.0237212, 0.0252382, 0.00113463, 0.0255029,
		0.0169894, 0.0261341, 0.00197635, 0.0422011, 0.000954646, 0.0305311, 0.0402881, 0.017637, 0.0439815, 0.0322691, 0.0389679, 0.0428597, 0.00505465, 0.0251735, 0.0328695, 0.00931417,
		0.0449759, 0.00761884, 0.0414137, 0.0124372, 0.042121, 0.0297199, 0.00324577, 0.0463184, 0.0115174, 0.0415517, 0.0227734, 0.0352386, 0.0167899, 0.023908, 0.0107414, 0.0337793,
		4.2097e-05, 0.0127178, 0.0259804, 0.000996743, 0.0432489, 0.0162685, 0.0186337, 0.0372304, 0.0485375, 0.00760162, 0.0300901, 0.00359217, 0.0327751, 0.0129596, 0.0129063, 0.027751,
		0.0205785, 0.00432, 0.0401882, 0.0126994, 0.0340399, 0.0434339, 0.00901784, 0.0455573, 0.0349856, 0.0317912, 0.0307959, 0.00177551, 0.00569917, 0.0415373, 0.0355548, 0.00574127,
		0.00425509, 0.0115352, 0.00673801, 0.0475039, 0.0278036, 0.0253717, 0.0347343, 0.0263411, 0.0329734, 0.0148244, 0.0299333, 0.0157485, 0.027784, 0.0428396, 0.0434995, 0.0483625,
		0.0471596, 0.0336876, 0.0110619, 0.0311996, 0.0271216, 0.0200798, 0.0267569, 0.0121072, 0.00187095, 0.00755278, 0.0138827, 0.00757012, 0.0490901, 0.0494375, 0.0133114, 0.00334518,
		0.0109727, 0.0200494, 0.000849134, 0.0387763, 0.0454211, 0.0355835, 0.0151174, 0.0283945, 0.00040788, 0.0450507, 0.044143, 0.0281919, 0.0378903, 0.0376424, 0.0265544, 0.03505,
		0.0213301, 0.0376163, 0.0162495, 0.0484517, 0.00769609, 0.0430064, 0.0105589, 0.00956704, 0.000559196, 0.0244416, 0.0171372, 0.0496493, 0.0238791, 0.0304485, 0.00299447, 0.0348518,
		0.000497956, 0.00384361, 0.023628, 0.0459191, 0.0394271, 0.0387454, 0.0243136, 0.0398349, 0.0337961, 0.0184566, 0.0180269, 0.0216864, 0.00609902, 0.0445813, 0.0067364, 0.0274291,
		0.0321976, 0.0229859, 0.0258808, 0.0398937, 0.0159923, 0.0364397, 0.0494607, 0.0165515, 0.0108813, 0.0165979, 0.0162008, 0.0347604, 0.0470464, 0.0191953, 0.0196122, 0.0475444,
		0.0230389, 0.0432403, 0.0434635, 0.012466, 0.0319857, 0.0177771, 0.00230092, 0.0157818, 0.0362337, 0.0203278, 0.0374683, 0.0423327, 0.0149091, 0.0442047, 0.0197618, 0.0471067,
		0.0171906, 0.0456426, 0.0370003, 0.0331829, 0.0320823, 0.0364611, 0.0497345, 0.0429636, 0.00305895, 0.0159353, 0.0277241, 0.000105381, 0.0351306, 0.0473363, 0.0476498, 0.0081695,
		0.0405766, 0.0411133, 0.0206355, 0.0225623, 0.00889035, 0.0229364, 0.0383441, 0.045124, 0.0432642, 0.0258124, 0.0374567, 0.00817322, 0.0200171, 0.00721853, 0.00527988, 0.0372077,
		0.00286114, 0.0422802, 0.0203906, 0.0349434, 0.0287413, 0.0201251, 0.0279071, 0.0318002, 0.0360604, 0.00563114, 0.0319056, 0.021191, 0.00296744, 0.0295554, 0.0293605, 0.043544,
		0.0206686, 0.0499959, 0.0161063, 0.029559, 0.0229323, 0.00445037, 0.024683, 0.0161965, 0.0302627, 0.0121397, 0.0243697, 0.000279802, 0.0193583, 0.0296496, 0.0374875, 0.0222194,
		0.0219298, 0.00787805, 0.00716284, 0.000671106, 0.0280031, 0.0350699, 0.0324713, 0.0140635, 0.0407011, 0.014377, 0.0352545, 0.0436685, 0.0439324, 0.0146149, 0.0372125, 0.014601,
		0.0146109, 0.00331875, 0.04416, 0.0375432, 0.00776912, 0.018843, 0.00373968, 0.0380319, 0.0309828, 0.0281094, 0.0383117, 0.000341018, 0.00775899, 0.0257991, 0.0225604, 0.0296888,
		0.0336772, 0.0297233, 0.0303599, 0.0116803, 0.0147932, 0.0128313, 0.0257438, 0.00549423, 0.0272082, 0.0109983, 0.0491627, 0.0211406, 0.0256132, 0.0363752, 0.0357416, 0.040224,
		0.039694, 0.0299016, 0.0277672, 0.0474631, 0.0487446, 0.0315069, 0.035495, 0.0297273, 0.0096163, 0.0238066, 0.0300684, 0.0173753, 0.0496057, 0.00262878, 0.0470641, 0.0332829,
		0.032352, 0.027424, 0.0449632, 0.0471452, 0.0402553, 0.020707, 0.00263946, 0.0174635, 0.0317053, 0.00180218, 0.0386041, 0.00731844, 0.0381774, 0.0243457, 0.0475425, 0.0278714,
		0.00424723, 0.0253097, 0.0253344, 0.00299182, 0.00681662, 0.0108294, 0.0327192, 0.0164329, 0.034636, 0.0127875, 0.0338082, 0.0342418, 0.0154163, 0.0308723, 0.0175247, 0.0477683,
		0.00829634, 0.0124879, 0.0449136, 0.0485516, 0.0331949, 0.047553, 0.0160151, 0.0149002, 0.0493552, 0.00461918, 0.0222186, 0.0375326, 0.0289648, 0.0197611, 0.015404, 0.0332121,
		0.0450708, 0.0407384, 0.0362039, 0.00188741, 0.0015678, 0.018923, 0.0183203, 0.0362038, 0.0317105, 0.00212855, 0.0204456, 0.0471268, 0.0330009, 0.0379703, 0.0448952, 0.0412972,
		0.000458165, 0.0398087, 0.0398488, 0.0336531, 0.0373617, 0.00586392, 0.0485532, 0.0367169, 0.0104831, 0.0207718, 0.0242495, 0.0394479, 0.0405329, 0.0396535, 0.02266, 0.0356037,
		0.0303919, 0.00886385, 0.0374911, 0.0319597, 0.0277869, 0.00581143, 0.0181635, 0.00949742, 0.00793998, 0.0386091, 0.00662425, 0.0409408, 0.0265794, 0.00151941, 0.0322381, 0.0270375,
		0.0413281, 0.0220869, 0.0106906, 0.0286899, 0.0279508, 0.00924382, 0.0154068, 0.0384339, 0.0300157, 0.0396564, 0.0278818, 0.0205486, 0.0293098, 0.000541793, 0.00615226, 0.00970174,
		0.00940565, 0.0436434, 0.0416614, 0.0371925, 0.0494548, 0.00982493, 0.0466899, 0.00739478, 0.048434, 0.00331419, 0.0483356, 0.0250134, 0.0048336, 0.0305737, 0.00205089, 0.0461617,
		0.00266055, 0.0127415, 0.0248516, 0.0306113, 0.0219853, 0.0402585, 0.0190452, 0.00200095, 0.0299148, 0.046927, 0.0225495, 0.00922466, 0.0474688, 0.0287018, 0.0189264, 0.00687447,
		0.0223451, 0.0105878, 0.044067, 0.0217999, 0.0204127, 0.0407569, 0.0291947, 0.0188468, 0.0440711, 0.0275304, 0.0438601, 0.0489047, 0.00810404, 0.045911, 0.0450665, 0.0107646,
		0.00865249, 0.0199181, 0.0413759, 0.0306378, 0.0101766, 0.0104212, 0.0326387, 0.0400914, 0.00734819, 0.00518826, 0.049316, 0.00481701, 0.03389, 0.0182424, 0.0116915, 0.00623518,
		0.0288303, 0.00575849, 0.0280351, 0.049243, 0.0465154, 0.00722985, 0.0180898, 0.0405865, 0.0347602, 0.0119499, 0.0394913, 0.0428642, 0.00786091, 0.0345577, 0.00362883, 0.0165134,
		0.00447584, 0.0450048, 0.0471512, 0.0146524, 0.0054259, 0.0297899, 0.00474376, 0.0127741, 0.0349782, 0.00405979, 0.0175911, 0.0188682, 0.0223022, 0.0292826, 0.0251034, 0.00113247,
		0.0350411, 0.00313853, 0.000375471, 0.0315565, 0.0103684, 0.0184652, 0.022143, 0.0451286, 0.0304151, 0.0116343, 0.0379928, 0.038276, 0.0461921, 0.0416217, 0.00478943, 0.000667891,
		0.0366264, 0.00194061, 0.0153203, 0.0420523, 0.0317305, 0.020064, 0.00482639, 0.0167087, 0.0241238, 0.0224175, 0.0355769, 0.046426, 0.00170009, 0.0106803, 0.0475585, 0.0367412,
		0.0138189, 0.047934, 0.0182977, 0.0241872, 0.0163992, 0.0404407, 0.0193158, 0.0468143, 0.00207502, 0.00730865, 0.0350904, 0.0482671, 0.0489303, 0.0398798, 0.048935, 0.0355567,
		0.0418204, 0.0142552, 0.027609, 0.023551, 0.0343193, 0.0324354, 0.0402597, 0.0084431, 0.0048529, 0.0258366, 0.00486915, 0.00655299, 0.0365169, 0.00242766, 0.0432941, 0.000335808,
		0.00036164, 0.0115918, 0.0245231, 0.0167609, 0.00203252, 0.0438389, 0.0135752, 0.00410754, 0.00114754, 0.0486656, 0.00237462, 7.78428e-05, 0.0385454, 0.00130958, 0.0356346, 0.0303658,
		0.0155648, 0.0132436, 0.00391676, 0.0498841, 0.045679, 0.0441764, 0.00832722, 0.000531871, 0.020013, 0.0131964, 0.00708486, 0.00652999, 0.015624, 0.000379006, 0.0068658, 0.0159857,
		0.0119708, 0.0313889, 0.0327465, 0.0140033, 0.0252277, 0.0463217, 0.0181109, 0.0263753, 0.0449873, 0.0204855, 0.0264531, 0.0335327, 0.0217951, 0.0120877, 0.0138985, 0.0373599,
		0.0253312, 0.0178152, 0.037244, 0.0210102, 0.0119917, 0.0455712, 0.0215421, 0.0320047, 0.0087676, 0.0286269, 0.0385347, 0.0243916, 0.0290059, 0.0454005, 0.0403773, 0.0409767,
		0.0267893, 0.0231238, 0.00498008, 0.00201708, 0.0194455, 0.0230909, 0.0283924, 0.0144328, 0.0435764, 0.00484547, 0.0479655, 0.0153715, 0.0169331, 0.0118639, 0.0027314, 0.0422644,
		0.0296792, 0.0399754, 0.0132746, 0.0416708, 0.0355467, 0.0348166, 0.0236756, 0.0443143, 0.0134436, 0.0122103, 0.0187059, 0.0424495, 0.00761075, 0.00908316, 0.0334262, 0.0344001,
		0.032207, 0.0384063, 0.0364172, 0.00165248, 0.0114973, 0.0148095, 0.0160853, 0.00507369, 0.019655, 0.0140508, 0.0204452, 0.0365881, 0.0259147, 0.0231766, 0.0288525, 0.00559389,
		0.013152, 0.0421271, 0.0472647, 0.0486987, 0.0269437, 0.0209403, 0.0430129, 0.0403872, 0.0331505, 0.0117188, 0.0328367, 0.0407613, 0.0208019, 0.016263, 0.0251614, 0.00300891,
		0.00466926, 0.0115786, 0.00466139, 0.0161665, 0.0263881, 0.0207467, 0.0212402, 0.0460431, 0.0347975, 0.0416854, 0.0326312, 0.0107122, 0.014862, 0.0114837, 0.016306, 0.028014,
		0.00361078, 0.0135708, 0.0267126, 0.0305545, 0.0345111, 0.0197255, 0.0209417, 0.0176616, 0.0314443, 0.0037784, 0.00842289, 0.00224624, 0.0200414, 0.0335843, 0.00525515, 0.0247106,
		0.0451628, 0.00991655, 0.0408771, 0.0215509, 0.0306632, 0.0121173, 0.017594, 0.0154607, 0.00380273, 0.000225279, 0.0261728, 0.0186647, 0.011709, 0.0424789, 0.0466787, 0.0153198,
		0.00604967, 0.0233913, 0.0458742, 0.0405607, 0.0431168, 0.0168159, 0.00822233, 0.0245611, 0.0205943, 0.0166452, 0.0268074, 0.0406357, 0.000229501, 0.0320625, 0.0153463, 0.0453923,
		0.0419791, 0.00622343, 0.0169433, 0.0226423, 0.0183408, 0.0345373, 0.038103, 0.0221435, 0.0347626, 0.0142758, 0.0408082, 0.0464716, 0.00675471, 0.0374869, 0.0117914, 0.0128044,
		0.0108782, 0.00766563, 0.00336512, 0.00399496, 0.0244815, 0.0115875, 0.0285561, 0.0450759, 0.0282327, 0.00536343, 0.0357116, 0.0284622, 0.0374259, 0.00105785, 0.0238545, 0.029405,
		0.00728129, 0.0407978, 0.00204729, 0.0256221, 0.0253352, 0.0401503, 0.0477656, 0.0100978, 0.00442608, 0.0385738, 0.00656939, 0.0111808, 0.0260606, 0.0183608, 0.0239852, 0.0369388,
		0.0260264, 0.0273503, 0.0409337, 0.000507975, 0.0389377, 0.0194898, 0.0455838, 0.0171704, 0.0248533, 0.0312954, 0.0456326, 0.0122792, 0.0323533, 0.0194871, 0.0416842, 0.0396345,
		0.0102849, 0.0437315, 0.0152566, 0.0356201, 0.0338818, 0.0130222, 0.0457179, 0.0383078, 0.00159592, 0.00228726, 0.0494886, 0.0276566, 0.0206481, 0.0234738, 0.0145953, 0.0466745,
		0.000824117, 0.00552909, 0.0471825, 0.0397619, 0.0250189, 0.0427663, 0.00693229, 0.0498722, 0.0240617, 0.00256489, 0.0121514, 0.00641495, 0.022052, 0.00383557, 0.0460495, 0.0323369,
		0.0475671, 0.0113061, 0.017957, 0.0314488, 0.0243283, 0.0136749, 0.0197567, 0.0259242, 0.0159622, 0.0192453, 0.00358073, 0.0366102, 0.0427191, 0.0181761, 0.0332847, 0.0435432,
		0.0237052, 0.0304671, 0.0333051, 0.0487241, 0.0232334, 0.0402374, 0.0485962, 0.0472951, 0.0428023, 0.0107476, 0.00371009, 0.0148543, 0.0145832, 0.0497596, 0.0471912, 0.0121502,
		0.0110657, 0.0151483, 0.0435991, 0.0353939, 0.0288232, 0.0133557, 0.0113181, 0.0447853, 0.032601, 0.0148988, 0.0313955, 0.0253202, 0.0330749, 0.0146802, 0.0188634, 0.00678005
	};

	mRandom = new qreal[MAX_NOISE_LENGTH];
	for(int i = 0; i < MAX_NOISE_LENGTH; ++i) mRandom[i] = random[i];
}

ViNoiseCreator::~ViNoiseCreator()
{
	delete [] mRandom;
}

void ViNoiseCreator::createNoise(ViBuffer *input, ViBuffer *output, ViBuffer *mask, ViBuffer *sizeMask)
{
	output->setFormat(input->format());
	mask->setFormat(input->format());

	ViAudioReadData inputData(input);
	inputData.setSampleCount(WINDOW_SIZE * 2); // Times 2 so that every channel has a size of WINDOW_SIZE
	ViAudioWriteData outputData(output);
	outputData.setSampleCount(WINDOW_SIZE * 2);
	ViAudioWriteData maskData(mask);
	maskData.setSampleCount(WINDOW_SIZE * 2);
	ViAudioWriteData sizeData;
	if(sizeMask != NULL)
	{
		sizeData.setBuffer(sizeMask);
		sizeData.setSampleCount(WINDOW_SIZE * 2);
	}

	mNoiseLength = MIN_NOISE_LENGTH;
	mNoiseType = Hill;
	mNoiseDirection = 1;

	while(inputData.hasData())
	{
		inputData.read();
		ViSampleChunk &data1 = inputData.splitSamples(0);
		ViSampleChunk &data2 = inputData.splitSamples(1);

		ViSampleChunk mask1(data1.size());
		ViSampleChunk mask2(data2.size());

		ViSampleChunk sizeMask1(data1.size());
		ViSampleChunk sizeMask2(data2.size());

		addNoise(data1, data2, mask1, mask2, sizeMask1, sizeMask2);

		outputData.enqueueSplitSamples(data1, 0);
		outputData.enqueueSplitSamples(data2, 1);
		maskData.enqueueSplitSamples(mask1, 0);
		maskData.enqueueSplitSamples(mask2, 1);

		if(sizeMask != NULL)
		{
			sizeData.enqueueSplitSamples(sizeMask1, 0);
			sizeData.enqueueSplitSamples(sizeMask2, 1);
		}
	}
}

int ViNoiseCreator::minimumNoiseSize()
{
	return MIN_NOISE_LENGTH;
}

int ViNoiseCreator::maximumNoiseSize()
{
	return MAX_NOISE_LENGTH;
}

int ViNoiseCreator::noiseSizeCount()
{
	return maximumNoiseSize() - minimumNoiseSize() + 1;
}

qreal ViNoiseCreator::toSizeMask(const int &length)
{
	return length / 100.0;
}

int ViNoiseCreator::fromSizeMask(const qreal &length)
{
	return viround(length * 100);
}

void ViNoiseCreator::addNoise(ViSampleChunk &samples1, ViSampleChunk &samples2, ViSampleChunk &mask1, ViSampleChunk &mask2, ViSampleChunk &sizeMask1, ViSampleChunk &sizeMask2)
{
	int i, currentOffset, halfWidth;
	for(i = 0; i < mask1.size(); ++i)
	{
		mask1[i] = 0;
		sizeMask1[i] = 0;
	}
	for(i = 0; i < mask2.size(); ++i)
	{
		mask2[i] = 0;
		sizeMask2[i] = 0;
	}

	halfWidth = NOISE_OFFSET / 2;
	currentOffset = halfWidth;
	while(currentOffset + MAX_NOISE_LENGTH + halfWidth <= samples1.size())
	{
		createNoiseKind();
		for(i = 0; i < mNoiseLength; ++i)
		{
			if(mNoise[i] > 1) samples1[i + currentOffset] = 1;
			else if(mNoise[i] < -1) samples1[i + currentOffset] = -1;
			else samples1[i + currentOffset] = mNoise[i];

			mask1[i + currentOffset] = 1;
			sizeMask1[i + currentOffset] = toSizeMask(mNoiseLength);
		}
		currentOffset += MAX_NOISE_LENGTH + NOISE_OFFSET;
		nextNoiseKind();
	}


	currentOffset = NOISE_OFFSET;
	while(currentOffset + MAX_NOISE_LENGTH + NOISE_OFFSET <= samples1.size())
	{
		createNoiseKind();
		for(i = 0; i < mNoiseLength; ++i)
		{
			if(mNoise[i] > 1) samples2[i + currentOffset] = 1;
			else if(mNoise[i] < -1) samples2[i + currentOffset] = -1;
			else samples2[i + currentOffset] = mNoise[i];

			mask2[i + currentOffset] = 1;
			sizeMask2[i + currentOffset] = toSizeMask(mNoiseLength);
		}
		currentOffset += MAX_NOISE_LENGTH + NOISE_OFFSET;
		nextNoiseKind();
	}
}

void ViNoiseCreator::createNoiseKind()
{
	mNoise.resize(mNoiseLength);

	if(mNoiseType == 0) createNoise1();
	else if(mNoiseType == 1) createNoise2();
	else if(mNoiseType == 2) createNoise3();
	else if(mNoiseType == 3) createNoise4();
}

void ViNoiseCreator::nextNoiseKind()
{
	++mNoiseLength;
	if(mNoiseLength > MAX_NOISE_LENGTH) mNoiseLength = MIN_NOISE_LENGTH;

	mNoiseType = (Type) (int(mNoiseType) + 1);
	if(mNoiseType > ZigZag) mNoiseType = Hill;

	mNoiseDirection *= -1;
}

void ViNoiseCreator::createNoise1()
{
	for(int i = 0; i < mNoiseLength; ++i)
	{
		mNoise[i] = mNoiseDirection * (1 - mRandom[i]);
	}
}

void ViNoiseCreator::createNoise2()
{
	int i, halfLength = mNoiseLength / 2;
	for(i = 0; i < halfLength; ++i)
	{
		mNoise[i] = mNoiseDirection * (1 - mRandom[i]);;
	}
	for(i = halfLength; i < mNoiseLength; ++i)
	{
		mNoise[i] = -1 * mNoiseDirection * (1 - mRandom[i]);;
	}
}

void ViNoiseCreator::createNoise3()
{
	int i, index = 0, end;
	int parts = qFloor(mNoiseLength / 4.0);

	qreal add = 1.0 / parts;

	qreal current = 0;

	// First spike
	for(i = 0; i < parts; ++i)
	{
		qreal value = current + (mNoiseDirection * mRandom[index]);
		mNoise[index] = value;
		++index;
		current += mNoiseDirection * add;
	}

	// Big double-spike
	end = 3 * parts;
	for(i = parts; i < end; ++i)
	{
		qreal value = current + (-1 * mNoiseDirection * mRandom[index]);
		mNoise[index] = value;
		++index;
		current += -1 * mNoiseDirection * add;
	}

	// Last spike
	for(i = end; i < mNoiseLength; ++i)
	{
		qreal value = current + (mNoiseDirection * mRandom[index]);
		mNoise[index] = value;
		++index;
		current += mNoiseDirection * add;
	}
}

void ViNoiseCreator::createNoise4()
{
	int current = 1;
	for(int i = 0; i < mNoiseLength; ++i)
	{
		mNoise[i] = current * mNoiseDirection * (1 - mRandom[i]);
		current *= -1;
	}
}
